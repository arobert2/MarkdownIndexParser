using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace MarkdownIndexParser
{
    class Program
    {
        static void Main(string[] args)
        {
            string path = args[0];      //path to original md file.
            if (path == null)
                return;

            List<MDHeaders> TableOfContents = new List<MDHeaders>();    //Table of Contents generated by MDHeader files.
            StringBuilder sb = new StringBuilder();     //string builder for building as I read.

            //checks to see if file exists.
            if (!File.Exists(path))
                Console.WriteLine("NO SUCH FILE!");

            //reads the stream of the file. creates MDHeader objects and adds them to TableOfContents and adds each line to StringBuidler sb.
            using (StreamReader sr = new StreamReader(path))
            {
                string next;
                while ((next = sr.ReadLine()) != null)
                {
                    sb.AppendLine(next);
                    if (next.Length > 1 && next[0].Equals('#'))
                        TableOfContents.Add(new MDHeaders(next));
                }
            }

            //Generate a TableOfContents StringBuilder object.
            StringBuilder toc = BuildTableOfContents(TableOfContents);
            //append original content.
            toc.AppendLine(sb.ToString());

            Random rand = new Random();
            string newpath = path.Substring(0,path.Length - 3) + "-" + rand.Next(10000).ToString("X") + ".md";

            using (StreamWriter sw = new StreamWriter(newpath))
            {
                sw.Write(toc.ToString());
            }
        }
        
        static StringBuilder BuildTableOfContents(List<MDHeaders> lmdh)
        {
            StringBuilder sb = new StringBuilder();
            foreach(MDHeaders mdh in lmdh)
            {
                string tier = "   ".Multiply(mdh.Tier);
                sb.AppendLine(string.Format("{0}1. [{1}]({2})",tier,mdh.Title,mdh.Anchor));
            }
            sb.AppendLine();
            return sb;
        }
    }
}
